function decoded_bits = LTE_Reed_Muller_decode(rx_symbols, code_length)

permutation_for_32_O = [31, 0, 20, 1, 2, 21, 3, 4, ...
    22, 5, 6, 23, 7, 8, 9, 24, ...
    19, 25, 10, 11, 12, 13, 26, 27, ...
    14, 15, 28, 16, 17, 18, 29, 30] + 1;

interleaved_symbols = rx_symbols(permutation_for_32_O);

% load mask_matrix;

if code_length > 6
    
    mask_matrix_1 = [1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     1; ...
        1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1     1     1    -1    -1    -1    -1    -1     1     1    -1    -1; ...
        1     1     1    -1    -1    -1     1     1     1     1    -1    -1     1    -1    -1    -1     1     1    -1     1    -1    -1    -1    -1     1    -1; ...
        1    -1    -1     1     1     1    -1    -1    -1    -1     1     1    -1     1     1    -1     1    -1     1    -1     1     1    -1    -1    -1     1; ...
        1     1     1     1    -1     1    -1     1    -1    -1    -1    -1    -1     1     1    -1     1     1     1    -1    -1     1    -1    -1     1     1; ...
        1    -1    -1    -1     1    -1     1    -1     1     1     1     1     1    -1    -1    -1     1    -1    -1     1     1    -1    -1    -1    -1    -1; ...
        1     1     1    -1     1    -1    -1     1    -1    -1     1     1    -1    -1    -1     1     1     1    -1    -1     1    -1     1     1     1    -1; ...
        1    -1    -1     1    -1     1     1    -1     1     1    -1    -1     1     1     1     1     1    -1     1     1    -1     1     1     1    -1     1; ...
        1     1     1     1     1     1     1    -1    -1    -1     1     1    -1    -1     1    -1     1    -1    -1     1    -1    -1     1    -1    -1    -1; ...
        1    -1    -1    -1    -1    -1    -1     1     1     1    -1    -1     1     1    -1    -1     1     1     1    -1     1     1     1    -1     1     1; ...
        1     1     1    -1    -1    -1     1    -1    -1    -1    -1    -1    -1     1    -1     1     1    -1     1     1     1     1    -1     1    -1     1; ...
        1    -1    -1     1     1     1    -1     1     1     1     1     1     1    -1     1     1     1     1    -1    -1    -1    -1    -1     1     1    -1; ...
        1     1     1     1    -1     1    -1    -1     1     1    -1    -1     1    -1     1     1     1    -1    -1    -1     1    -1    -1     1    -1    -1; ...
        1    -1    -1    -1     1    -1     1     1    -1    -1     1     1    -1     1    -1     1     1     1     1     1    -1     1    -1     1     1     1; ...
        1     1     1    -1     1    -1    -1    -1     1     1     1     1     1     1    -1    -1     1    -1     1    -1    -1     1     1    -1    -1     1; ...
        1    -1    -1     1    -1     1     1     1    -1    -1    -1    -1    -1    -1     1    -1     1     1    -1     1     1    -1     1    -1     1    -1; ...
        1     1    -1     1    -1     1     1     1     1    -1    -1     1     1     1    -1    -1    -1    -1    -1    -1     1     1     1     1     1    -1; ...
        1    -1     1    -1     1    -1    -1    -1    -1     1     1    -1    -1    -1     1    -1    -1     1     1     1    -1    -1     1     1    -1     1; ...
        1     1    -1    -1     1    -1     1     1     1    -1     1    -1     1    -1     1     1    -1    -1     1    -1    -1    -1    -1    -1     1     1; ...
        1    -1     1     1    -1     1    -1    -1    -1     1    -1     1    -1     1    -1     1    -1     1    -1     1     1     1    -1    -1    -1    -1; ...
        1     1    -1     1     1     1    -1     1    -1     1     1    -1    -1     1    -1     1    -1    -1    -1     1    -1     1    -1    -1     1    -1; ...
        1    -1     1    -1    -1    -1     1    -1     1    -1    -1     1     1    -1     1     1    -1     1     1    -1     1    -1    -1    -1    -1     1; ...
        1     1    -1    -1    -1    -1    -1     1    -1     1    -1     1    -1    -1     1    -1    -1    -1     1     1     1    -1     1     1     1     1; ...
        1    -1     1     1     1     1     1    -1     1    -1     1    -1     1     1    -1    -1    -1     1    -1    -1    -1     1     1     1    -1    -1; ...
        1     1    -1     1    -1     1     1    -1    -1     1    -1     1    -1    -1    -1     1    -1     1     1    -1    -1    -1     1    -1    -1     1; ...
        1    -1     1    -1     1    -1    -1     1     1    -1     1    -1     1     1     1     1    -1    -1    -1     1     1     1     1    -1     1    -1; ...
        1     1    -1    -1     1    -1     1    -1    -1     1     1    -1    -1     1     1    -1    -1     1    -1    -1     1     1    -1     1    -1    -1; ...
        1    -1     1     1    -1     1    -1     1     1    -1    -1     1     1    -1    -1    -1    -1    -1     1     1    -1    -1    -1     1     1     1; ...
        1     1    -1     1     1     1    -1    -1     1    -1     1    -1     1    -1    -1    -1    -1     1     1     1     1    -1    -1     1    -1     1; ...
        1    -1     1    -1    -1    -1     1     1    -1     1    -1     1    -1     1     1    -1    -1    -1    -1    -1    -1     1    -1     1     1    -1; ...
        1     1    -1    -1    -1    -1    -1    -1     1    -1    -1     1     1     1     1     1    -1     1    -1     1    -1     1     1    -1    -1    -1; ...
        1    -1     1     1     1     1     1     1    -1     1     1    -1    -1    -1    -1     1    -1    -1     1    -1     1    -1     1    -1     1     1];
    
    mask_matrix_2 = [ 1     1     1     1     1     1; ...
        1     1     1     1     1    -1; ...
        1    -1     1     1     1    -1; ...
        1    -1     1     1     1     1; ...
        -1     1    -1     1    -1    -1; ...
        -1     1    -1     1    -1     1; ...
        -1    -1    -1     1    -1     1; ...
        -1    -1    -1     1    -1    -1; ...
        1     1     1    -1    -1    -1; ...
        1     1     1    -1    -1     1; ...
        1    -1     1    -1    -1     1; ...
        1    -1     1    -1    -1    -1; ...
        -1     1    -1    -1     1     1; ...
        -1     1    -1    -1     1    -1; ...
        -1    -1    -1    -1     1    -1; ...
        -1    -1    -1    -1     1     1; ...
        -1    -1     1    -1    -1    -1; ...
        -1    -1     1    -1    -1     1; ...
        -1     1     1    -1    -1     1; ...
        -1     1     1    -1    -1    -1; ...
        1    -1    -1    -1     1     1; ...
        1    -1    -1    -1     1    -1; ...
        1     1    -1    -1     1    -1; ...
        1     1    -1    -1     1     1; ...
        -1    -1     1     1     1     1; ...
        -1    -1     1     1     1    -1; ...
        -1     1     1     1     1    -1; ...
        -1     1     1     1     1     1; ...
        1    -1    -1     1    -1    -1; ...
        1    -1    -1     1    -1     1; ...
        1     1    -1     1    -1     1; ...
        1     1    -1     1    -1    -1];
    
    mask_matrix = [mask_matrix_1, mask_matrix_2];
    
    de_masked_matrix = interleaved_symbols .* mask_matrix;
    
    A = de_masked_matrix * hadamard(32);
    
else
    A = interleaved_symbols * hadamard(32);
end

a = max(max(abs(A)));

[c, d] = find(abs(A) == a);

x_prime = bitget(d - 1, 1:5);

x_1 = double(A(c, d) < 0);

decoded_bits = [x_1, x_prime, bitget(c - 1, 5:-1:1)];

decoded_bits = decoded_bits(1:code_length);

end